///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Sid_FCGAProject
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Losses_Screen_No recording.
    /// </summary>
    [TestModule("7d89e366-e13b-49b4-ab7e-bfcafb45b2d9", ModuleType.Recording, 1)]
    public partial class Losses_Screen_No : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repository.
        /// </summary>
        public static global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repo = global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository.Instance;

        static Losses_Screen_No instance = new Losses_Screen_No();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Losses_Screen_No()
        {
            Note_Desc = "OK";
            LCarrierName = "FWCI";
            LClaimCount = "{Back}2";
            IncurredAmount = "1234";
            Status_Reason = "Losses Screen";
            LossYrNo = "2";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Losses_Screen_No Instance
        {
            get { return instance; }
        }

#region Variables

        string _Note_Desc;

        /// <summary>
        /// Gets or sets the value of variable Note_Desc.
        /// </summary>
        [TestVariable("9d33d22a-faca-4b87-9929-980f0bf96173")]
        public string Note_Desc
        {
            get { return _Note_Desc; }
            set { _Note_Desc = value; }
        }

        string _LCarrierName;

        /// <summary>
        /// Gets or sets the value of variable LCarrierName.
        /// </summary>
        [TestVariable("4d76171d-4d72-4cab-8d98-0bae71e0a8f5")]
        public string LCarrierName
        {
            get { return _LCarrierName; }
            set { _LCarrierName = value; }
        }

        string _LClaimCount;

        /// <summary>
        /// Gets or sets the value of variable LClaimCount.
        /// </summary>
        [TestVariable("85f4c22b-63c9-45ae-86eb-bb0e878bfb1e")]
        public string LClaimCount
        {
            get { return _LClaimCount; }
            set { _LClaimCount = value; }
        }

        string _IncurredAmount;

        /// <summary>
        /// Gets or sets the value of variable IncurredAmount.
        /// </summary>
        [TestVariable("40d1c88b-c55c-413f-be0b-4240c03313bd")]
        public string IncurredAmount
        {
            get { return _IncurredAmount; }
            set { _IncurredAmount = value; }
        }

        string _Status_Reason;

        /// <summary>
        /// Gets or sets the value of variable Status_Reason.
        /// </summary>
        [TestVariable("d4bbf740-ba7d-4544-817f-feb7b0284389")]
        public string Status_Reason
        {
            get { return _Status_Reason; }
            set { _Status_Reason = value; }
        }

        string _LossYrNo;

        /// <summary>
        /// Gets or sets the value of variable LossYrNo.
        /// </summary>
        [TestVariable("df3d438b-1974-4a7f-9e49-481918b85297")]
        public string LossYrNo
        {
            get { return _LossYrNo; }
            set { _LossYrNo = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            MergedUserCodeMethod1(repo.ApplicationUnderTest.BorderWhitePb2Pr2Radio.SpanTagSelectInfo, repo.ApplicationUnderTest.LiTagNoInfo, repo.ApplicationUnderTest.LabelTagNoInfo, LossYrNo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtNote' at Center.", repo.ApplicationUnderTest.TxtNoteInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.TxtNote.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Note_Desc' with focus on 'ApplicationUnderTest.TxtNote'.", repo.ApplicationUnderTest.TxtNoteInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.TxtNote.PressKeys(Note_Desc);
            Delay.Milliseconds(0);
            
            Ranorex.AutomationHelpers.UserCodeCollections.WebLibrary.ReportFullPageScreenshot(repo.ApplicationUnderTest.SelfInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BtnSubmit' at Center.", repo.ApplicationUnderTest.BtnSubmitInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.BtnSubmit.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 35s to exist. Associated repository item: 'ApplicationUnderTest.LblPremium'", repo.ApplicationUnderTest.LblPremiumInfo, new ActionTimeout(35000), new RecordItemIndex(5));
            repo.ApplicationUnderTest.LblPremiumInfo.WaitForExists(35000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 20s.", new RecordItemIndex(6));
            Delay.Duration(20000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
