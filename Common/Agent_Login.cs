///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Sid_FCGAProject.Common
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Agent_Login recording.
    /// </summary>
    [TestModule("cf2935cc-2a5b-4d0a-a5f4-27a79fbb213c", ModuleType.Recording, 1)]
    public partial class Agent_Login : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repository.
        /// </summary>
        public static global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repo = global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository.Instance;

        static Agent_Login instance = new Agent_Login();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Agent_Login()
        {
            Agent_Login1 = "FrankCrumIns";
            Agent_Pwd = "FCia2020!";
            AgentName = "Adam Tully";
            Status_Reason = "Agent Login";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Agent_Login Instance
        {
            get { return instance; }
        }

#region Variables

        string _Agent_Login1;

        /// <summary>
        /// Gets or sets the value of variable Agent_Login1.
        /// </summary>
        [TestVariable("f8434622-7cd3-4c6d-8ae7-29e998cf6de1")]
        public string Agent_Login1
        {
            get { return _Agent_Login1; }
            set { _Agent_Login1 = value; }
        }

        string _Agent_Pwd;

        /// <summary>
        /// Gets or sets the value of variable Agent_Pwd.
        /// </summary>
        [TestVariable("cd435ddc-082f-4ce5-bcd5-7828864c9e58")]
        public string Agent_Pwd
        {
            get { return _Agent_Pwd; }
            set { _Agent_Pwd = value; }
        }

        string _AgentName;

        /// <summary>
        /// Gets or sets the value of variable AgentName.
        /// </summary>
        [TestVariable("4dec480d-951b-4b1c-a494-b42356de08e7")]
        public string AgentName
        {
            get { return _AgentName; }
            set { _AgentName = value; }
        }

        string _Status_Reason;

        /// <summary>
        /// Gets or sets the value of variable Status_Reason.
        /// </summary>
        [TestVariable("8a9ea96d-f401-488d-97ff-7519ca243bbb")]
        public string Status_Reason
        {
            get { return _Status_Reason; }
            set { _Status_Reason = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // AgentLogin
            Report.Log(ReportLevel.Info, "Section", "AgentLogin", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'ApplicationUnderTest.TxtBranchId' at Center.", repo.ApplicationUnderTest.TxtBranchIdInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.TxtBranchId.DoubleClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '(null)' on item 'ApplicationUnderTest.TxtBranchId'.", repo.ApplicationUnderTest.TxtBranchIdInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.TxtBranchId.Element.SetAttributeValue("Value", null);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$Agent_Login1' on item 'ApplicationUnderTest.TxtBranchId'.", repo.ApplicationUnderTest.TxtBranchIdInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.TxtBranchId.Element.SetAttributeValue("Value", Agent_Login1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogoPad20TextCenter' at Center.", repo.ApplicationUnderTest.LogoPad20TextCenterInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.LogoPad20TextCenter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'ApplicationUnderTest.TxtPassword' at Center.", repo.ApplicationUnderTest.TxtPasswordInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.TxtPassword.DoubleClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '(null)' on item 'ApplicationUnderTest.TxtPassword'.", repo.ApplicationUnderTest.TxtPasswordInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.TxtPassword.Element.SetAttributeValue("Value", null);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$Agent_Pwd' on item 'ApplicationUnderTest.TxtPassword'.", repo.ApplicationUnderTest.TxtPasswordInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.TxtPassword.Element.SetAttributeValue("Value", Agent_Pwd);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogoPad20TextCenter' at Center.", repo.ApplicationUnderTest.LogoPad20TextCenterInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.LogoPad20TextCenter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.SignIn'.", repo.ApplicationUnderTest.SignInInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.SignIn.PerformClick();
            Delay.Milliseconds(0);
            
            //Mouse_Click_Close(repo.UpdatePassword.CloseInfo);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(11));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SelectAgencyContact' at Center.", repo.ApplicationUnderTest.SelectAgencyContactInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.SelectAgencyContact.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AgentName' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.Search.PressKeys(AgentName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.Search.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BtnContinue' at Center.", repo.ApplicationUnderTest.BtnContinueInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.BtnContinue.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 15s to exist. Associated repository item: 'ApplicationUnderTest.LnkNewQuote'", repo.ApplicationUnderTest.LnkNewQuoteInfo, new ActionTimeout(15000), new RecordItemIndex(16));
            repo.ApplicationUnderTest.LnkNewQuoteInfo.WaitForExists(15000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(17));
            Delay.Duration(10000, false);
            
            // Agent Record Screen
            //Report.Log(ReportLevel.Info, "Section", "Agent Record Screen", new RecordItemIndex(18));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
