///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Sid_FCGAProject
{
    public partial class GL_ClassSpecific_1
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void TestExcel (RepoItemInfo tdtagInfo, string XPath, string xSheetName, int Iteration)
        {
        	
        	Microsoft.Office.Interop.Excel.Application excelFile = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbook excelWB= excelFile.Workbooks.Open(@XPath);
            Microsoft.Office.Interop.Excel.Worksheet excelWS=(Microsoft.Office.Interop.Excel.Worksheet) excelWB.Worksheets.get_Item(xSheetName);
            Microsoft.Office.Interop.Excel.Range xlRange = excelWS.UsedRange;
            
            int rowCount = xlRange.Rows.Count;

            //iterate over the rows and columns and print to the console as it appears in the file
            //excel is not zero based!!
            for (int i = 2; i <= rowCount; i++)
            {
            	Iteration = i-1;
              Microsoft.Office.Interop.Excel.Range tmpRange2=(Microsoft.Office.Interop.Excel.Range)excelWS.Cells[i,4];
              string cellText2=tmpRange2.Text.ToString();

               	if(cellText2 =="No")
               	{
               		WebElement webElementItem = Host.Local.FindSingle<WebElement>("/dom[@domain<'fwcins.com']//table[#'myTable']/tbody//td[@innertext>'Question ']/following-sibling::td[7]//label[@innertext='No']["+Iteration+"]");
               	   //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'labeltagInfo' at Center.", labeltaginfo);
                    webElementItem.Click();
               	
               	}else{
               		WebElement webElementItem1 = Host.Local.FindSingle<WebElement>("/dom[@domain<'fwcins.com']//table[#'myTable']/tbody//td[@innertext>'Question ']/following-sibling::td[6]/?/?/label[@innertext='Yes']["+Iteration+"]");
               		//Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'labeltagInfo1' at Center.", labeltaginfo1);
                    webElementItem1.Click();
               	  }
                 }
              excelWB.Save();
              excelWB.Close();
              excelFile.Quit();
              //Marshal.ReleaseComObject(excelWS);
              // Marshal.ReleaseComObject(excelWB);
               }
              }  
}