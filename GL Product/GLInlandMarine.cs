///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Sid_FCGAProject.GL_Product
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The GLInlandMarine recording.
    /// </summary>
    [TestModule("8ae41cd7-8bcf-45d3-9dd7-0bab73636a25", ModuleType.Recording, 1)]
    public partial class GLInlandMarine : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repository.
        /// </summary>
        public static global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repo = global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository.Instance;

        static GLInlandMarine instance = new GLInlandMarine();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public GLInlandMarine()
        {
            InstalationFloaterCoverage = "$10,000";
            ContractorHandTools = "$5,000";
            Leased_Equipment = "$10,000";
            Status_Reason = "Inland Marine";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static GLInlandMarine Instance
        {
            get { return instance; }
        }

#region Variables

        string _InstalationFloaterCoverage;

        /// <summary>
        /// Gets or sets the value of variable InstalationFloaterCoverage.
        /// </summary>
        [TestVariable("c0290ad4-492e-46a5-8387-754d7c5056b6")]
        public string InstalationFloaterCoverage
        {
            get { return _InstalationFloaterCoverage; }
            set { _InstalationFloaterCoverage = value; }
        }

        string _ContractorHandTools;

        /// <summary>
        /// Gets or sets the value of variable ContractorHandTools.
        /// </summary>
        [TestVariable("69c04822-0283-47bf-a342-442dab605aaf")]
        public string ContractorHandTools
        {
            get { return _ContractorHandTools; }
            set { _ContractorHandTools = value; }
        }

        string _Leased_Equipment;

        /// <summary>
        /// Gets or sets the value of variable Leased_Equipment.
        /// </summary>
        [TestVariable("0df6c3a3-9ed1-443a-9fec-fe72a3e8ae7d")]
        public string Leased_Equipment
        {
            get { return _Leased_Equipment; }
            set { _Leased_Equipment = value; }
        }

        string _Status_Reason;

        /// <summary>
        /// Gets or sets the value of variable Status_Reason.
        /// </summary>
        [TestVariable("d05a1319-0fe0-4406-b35d-cbca56ac60d1")]
        public string Status_Reason
        {
            get { return _Status_Reason; }
            set { _Status_Reason = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LabelTagNo1' at Center.", repo.ApplicationUnderTest.LabelTagNo1Info, new RecordItemIndex(0));
            repo.ApplicationUnderTest.LabelTagNo1.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LabelTagNo2' at Center.", repo.ApplicationUnderTest.LabelTagNo2Info, new RecordItemIndex(1));
            repo.ApplicationUnderTest.LabelTagNo2.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TblCoverages.NotCovered' at Center.", repo.ApplicationUnderTest.TblCoverages.NotCoveredInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.TblCoverages.NotCovered.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Search' at Center.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.Search.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$InstalationFloaterCoverage' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.Search.PressKeys(InstalationFloaterCoverage);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.Search.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TblCoverages.NotCovered1' at Center.", repo.ApplicationUnderTest.TblCoverages.NotCovered1Info, new RecordItemIndex(6));
            repo.ApplicationUnderTest.TblCoverages.NotCovered1.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ContractorHandTools' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.Search.EnsureVisible();
            Keyboard.Press(ContractorHandTools);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.Search.EnsureVisible();
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TblCoverages.NotCovered2' at Center.", repo.ApplicationUnderTest.TblCoverages.NotCovered2Info, new RecordItemIndex(9));
            repo.ApplicationUnderTest.TblCoverages.NotCovered2.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Search' at Center.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.Search.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Leased_Equipment' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.Search.PressKeys(Leased_Equipment);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.Search.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
