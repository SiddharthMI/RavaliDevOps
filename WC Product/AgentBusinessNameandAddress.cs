///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Sid_FCGAProject.WC_Product
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AgentBusinessNameandAddress recording.
    /// </summary>
    [TestModule("53b2b79b-e4e7-4bf7-9fc4-fd3881db8adf", ModuleType.Recording, 1)]
    public partial class AgentBusinessNameandAddress : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repository.
        /// </summary>
        public static global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repo = global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository.Instance;

        static AgentBusinessNameandAddress instance = new AgentBusinessNameandAddress();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AgentBusinessNameandAddress()
        {
            LegalEntityName = "Corporation";
            DBAName = "Autmfcga-321Sid";
            Address1 = "Address1";
            Address2 = "Address2";
            CityName = "Tampa";
            ZipcodeID = "33604";
            BusinessName = "AUTM FCGA-76765734";
            StatusReason = "Business Name and Address";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AgentBusinessNameandAddress Instance
        {
            get { return instance; }
        }

#region Variables

        string _LegalEntityName;

        /// <summary>
        /// Gets or sets the value of variable LegalEntityName.
        /// </summary>
        [TestVariable("ea781793-e3b8-42ec-94ca-6b9deae3041e")]
        public string LegalEntityName
        {
            get { return _LegalEntityName; }
            set { _LegalEntityName = value; }
        }

        string _DBAName;

        /// <summary>
        /// Gets or sets the value of variable DBAName.
        /// </summary>
        [TestVariable("d71c5b5e-368f-442f-9b67-a48b010b9438")]
        public string DBAName
        {
            get { return _DBAName; }
            set { _DBAName = value; }
        }

        string _Address1;

        /// <summary>
        /// Gets or sets the value of variable Address1.
        /// </summary>
        [TestVariable("4bf02d3b-2e09-460e-9d2a-06b62b5d6d43")]
        public string Address1
        {
            get { return _Address1; }
            set { _Address1 = value; }
        }

        string _Address2;

        /// <summary>
        /// Gets or sets the value of variable Address2.
        /// </summary>
        [TestVariable("bcc1081e-dda2-4f6e-8514-461c1907027d")]
        public string Address2
        {
            get { return _Address2; }
            set { _Address2 = value; }
        }

        string _CityName;

        /// <summary>
        /// Gets or sets the value of variable CityName.
        /// </summary>
        [TestVariable("11cd7e74-0070-47a3-8fed-0e71ac42d12a")]
        public string CityName
        {
            get { return _CityName; }
            set { _CityName = value; }
        }

        string _ZipcodeID;

        /// <summary>
        /// Gets or sets the value of variable ZipcodeID.
        /// </summary>
        [TestVariable("d3970543-5902-412b-9448-8f4f9e258ae6")]
        public string ZipcodeID
        {
            get { return _ZipcodeID; }
            set { _ZipcodeID = value; }
        }

        string _BusinessName;

        /// <summary>
        /// Gets or sets the value of variable BusinessName.
        /// </summary>
        [TestVariable("b02ad602-11d7-4fdd-aacb-a9fc5576b36b")]
        public string BusinessName
        {
            get { return _BusinessName; }
            set { _BusinessName = value; }
        }

        string _StatusReason;

        /// <summary>
        /// Gets or sets the value of variable StatusReason.
        /// </summary>
        [TestVariable("52d3ea9d-4217-4999-9815-e17a34c6aa20")]
        public string StatusReason
        {
            get { return _StatusReason; }
            set { _StatusReason = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Key_sequence_TxtBussInsuredName(repo.ApplicationUnderTest.TxtBussInsuredNameInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DrpLegalEntity' at Center.", repo.ApplicationUnderTest.DrpLegalEntityInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.DrpLegalEntity.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LegalEntityName' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.Search.EnsureVisible();
            Keyboard.Press(LegalEntityName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.Search.EnsureVisible();
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DBAName' with focus on 'ApplicationUnderTest.TxtDBAName'.", repo.ApplicationUnderTest.TxtDBANameInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.TxtDBAName.PressKeys(DBAName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Address1' with focus on 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress1'.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress1Info, new RecordItemIndex(5));
            repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress1.PressKeys(Address1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Address2' with focus on 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress2'.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress2Info, new RecordItemIndex(6));
            repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress2.PressKeys(Address2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$CityName' with focus on 'ApplicationUnderTest.TxtCity'.", repo.ApplicationUnderTest.TxtCityInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.TxtCity.PressKeys(CityName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ZipcodeID' with focus on 'ApplicationUnderTest.TxtZipCode'.", repo.ApplicationUnderTest.TxtZipCodeInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.TxtZipCode.PressKeys(ZipcodeID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(9));
            Delay.Duration(1000, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.MainContentHolder.UseAsIs' at Center.", repo.ApplicationUnderTest.MainContentHolder.UseAsIsInfo, new RecordItemIndex(10));
            //repo.ApplicationUnderTest.MainContentHolder.UseAsIs.Click();
            //Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
