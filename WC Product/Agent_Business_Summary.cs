///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Sid_FCGAProject.WC_Product
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Agent_Business_Summary recording.
    /// </summary>
    [TestModule("2340ca19-92d0-4cbb-b586-27897ba17777", ModuleType.Recording, 1)]
    public partial class Agent_Business_Summary : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repository.
        /// </summary>
        public static global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository repo = global::Sid_FCGAProject.Project_Repository.Sid_FCGAProjectRepository.Instance;

        static Agent_Business_Summary instance = new Agent_Business_Summary();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Agent_Business_Summary()
        {
            StateName = "Florida";
            ClassDesc = "0005,0042";
            BusinessName = "Autmfcga-222Sid";
            LegalEntityName = "Corporation";
            DBAName = "Autmfcga-321Sid";
            Address1 = "Address1";
            CityName = "Tampa";
            ZipcodeID = "33604";
            BusinessStartDate = "07/01/2021";
            EmpLiabilityLimitID = "$100,000/$500,000/$100,000";
            ExpModID = "1.89";
            OwnerFirstName = "S";
            OwnerLastName = "M";
            OwnerPercent = "100";
            OwnerState = "Florida";
            DescofOp = "OK";
            TxtFTEmp = "10,11";
            TxtPTEmp = "10,09";
            TxtGrossPayroll = "100000,17000";
            Address2 = "Address2";
            InsSubcontractorAmt = "4567";
            AdditionalInsuredName = "Raj";
            AddInsFEINNo = "4545454545";
            EffectiveDate = "07/29/2021";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Agent_Business_Summary Instance
        {
            get { return instance; }
        }

#region Variables

        string _StateName;

        /// <summary>
        /// Gets or sets the value of variable StateName.
        /// </summary>
        [TestVariable("32c073e9-f8d5-4ad6-a5f7-cc3a26ebe471")]
        public string StateName
        {
            get { return _StateName; }
            set { _StateName = value; }
        }

        string _ClassDesc;

        /// <summary>
        /// Gets or sets the value of variable ClassDesc.
        /// </summary>
        [TestVariable("fbb12939-7fe7-46c4-a543-d3247c583807")]
        public string ClassDesc
        {
            get { return _ClassDesc; }
            set { _ClassDesc = value; }
        }

        string _BusinessName;

        /// <summary>
        /// Gets or sets the value of variable BusinessName.
        /// </summary>
        [TestVariable("0b8d94a4-19ef-4058-8f11-63841a09b7bf")]
        public string BusinessName
        {
            get { return _BusinessName; }
            set { _BusinessName = value; }
        }

        string _LegalEntityName;

        /// <summary>
        /// Gets or sets the value of variable LegalEntityName.
        /// </summary>
        [TestVariable("c50e1fbc-3748-4776-9722-019452bbb2f5")]
        public string LegalEntityName
        {
            get { return _LegalEntityName; }
            set { _LegalEntityName = value; }
        }

        string _DBAName;

        /// <summary>
        /// Gets or sets the value of variable DBAName.
        /// </summary>
        [TestVariable("de3c4eac-21d8-4f8c-b4ec-5d5db395f71c")]
        public string DBAName
        {
            get { return _DBAName; }
            set { _DBAName = value; }
        }

        string _Address1;

        /// <summary>
        /// Gets or sets the value of variable Address1.
        /// </summary>
        [TestVariable("6e46333f-33ec-47dd-aacd-2d892e73e7d7")]
        public string Address1
        {
            get { return _Address1; }
            set { _Address1 = value; }
        }

        string _CityName;

        /// <summary>
        /// Gets or sets the value of variable CityName.
        /// </summary>
        [TestVariable("0c8b1e9c-e772-41f2-bb43-16b805669bc3")]
        public string CityName
        {
            get { return _CityName; }
            set { _CityName = value; }
        }

        string _ZipcodeID;

        /// <summary>
        /// Gets or sets the value of variable ZipcodeID.
        /// </summary>
        [TestVariable("6e2602ab-c418-44ec-9000-f5fccd135e77")]
        public string ZipcodeID
        {
            get { return _ZipcodeID; }
            set { _ZipcodeID = value; }
        }

        string _BusinessStartDate;

        /// <summary>
        /// Gets or sets the value of variable BusinessStartDate.
        /// </summary>
        [TestVariable("a038f0d1-0734-4e5b-86a6-95e368967ad0")]
        public string BusinessStartDate
        {
            get { return _BusinessStartDate; }
            set { _BusinessStartDate = value; }
        }

        string _EmpLiabilityLimitID;

        /// <summary>
        /// Gets or sets the value of variable EmpLiabilityLimitID.
        /// </summary>
        [TestVariable("585463c4-7ee2-4b68-82e0-2b768dabca56")]
        public string EmpLiabilityLimitID
        {
            get { return _EmpLiabilityLimitID; }
            set { _EmpLiabilityLimitID = value; }
        }

        string _ExpModID;

        /// <summary>
        /// Gets or sets the value of variable ExpModID.
        /// </summary>
        [TestVariable("ac0336b2-b371-4593-b314-95ac73a71808")]
        public string ExpModID
        {
            get { return _ExpModID; }
            set { _ExpModID = value; }
        }

        string _OwnerFirstName;

        /// <summary>
        /// Gets or sets the value of variable OwnerFirstName.
        /// </summary>
        [TestVariable("d5ace6be-32f8-46fa-99cc-5e01e162af6d")]
        public string OwnerFirstName
        {
            get { return _OwnerFirstName; }
            set { _OwnerFirstName = value; }
        }

        string _OwnerLastName;

        /// <summary>
        /// Gets or sets the value of variable OwnerLastName.
        /// </summary>
        [TestVariable("5c20b9fb-5994-4af9-9a0b-0648eed92cdc")]
        public string OwnerLastName
        {
            get { return _OwnerLastName; }
            set { _OwnerLastName = value; }
        }

        string _OwnerPercent;

        /// <summary>
        /// Gets or sets the value of variable OwnerPercent.
        /// </summary>
        [TestVariable("40ae2665-5de1-4678-b83f-1a17b3f7c007")]
        public string OwnerPercent
        {
            get { return _OwnerPercent; }
            set { _OwnerPercent = value; }
        }

        string _OwnerState;

        /// <summary>
        /// Gets or sets the value of variable OwnerState.
        /// </summary>
        [TestVariable("8b082ee2-406c-4e00-801e-71b50bdb890e")]
        public string OwnerState
        {
            get { return _OwnerState; }
            set { _OwnerState = value; }
        }

        string _DescofOp;

        /// <summary>
        /// Gets or sets the value of variable DescofOp.
        /// </summary>
        [TestVariable("27a581bc-4410-45d9-911b-ac59a909d592")]
        public string DescofOp
        {
            get { return _DescofOp; }
            set { _DescofOp = value; }
        }

        string _TxtFTEmp;

        /// <summary>
        /// Gets or sets the value of variable TxtFTEmp.
        /// </summary>
        [TestVariable("5c895c0f-2365-4646-8f6d-85aa5b05da36")]
        public string TxtFTEmp
        {
            get { return _TxtFTEmp; }
            set { _TxtFTEmp = value; }
        }

        string _TxtPTEmp;

        /// <summary>
        /// Gets or sets the value of variable TxtPTEmp.
        /// </summary>
        [TestVariable("d6bde544-08ca-4b55-a5bd-90ec56a29cae")]
        public string TxtPTEmp
        {
            get { return _TxtPTEmp; }
            set { _TxtPTEmp = value; }
        }

        string _TxtGrossPayroll;

        /// <summary>
        /// Gets or sets the value of variable TxtGrossPayroll.
        /// </summary>
        [TestVariable("e80f05ec-0faa-436d-b3ea-d551b98ea71e")]
        public string TxtGrossPayroll
        {
            get { return _TxtGrossPayroll; }
            set { _TxtGrossPayroll = value; }
        }

        string _Address2;

        /// <summary>
        /// Gets or sets the value of variable Address2.
        /// </summary>
        [TestVariable("d90ad83d-8ec8-492b-8d4c-530447ebc395")]
        public string Address2
        {
            get { return _Address2; }
            set { _Address2 = value; }
        }

        string _InsSubcontractorAmt;

        /// <summary>
        /// Gets or sets the value of variable InsSubcontractorAmt.
        /// </summary>
        [TestVariable("ef2fbaa0-c2cf-4152-a104-9d810bc65f4f")]
        public string InsSubcontractorAmt
        {
            get { return _InsSubcontractorAmt; }
            set { _InsSubcontractorAmt = value; }
        }

        string _AdditionalInsuredName;

        /// <summary>
        /// Gets or sets the value of variable AdditionalInsuredName.
        /// </summary>
        [TestVariable("118553fb-8a4a-45eb-a8a1-5229a3961f63")]
        public string AdditionalInsuredName
        {
            get { return _AdditionalInsuredName; }
            set { _AdditionalInsuredName = value; }
        }

        string _AddInsFEINNo;

        /// <summary>
        /// Gets or sets the value of variable AddInsFEINNo.
        /// </summary>
        [TestVariable("63342feb-c58e-4e1e-82d2-4ee1c5e0c7d3")]
        public string AddInsFEINNo
        {
            get { return _AddInsFEINNo; }
            set { _AddInsFEINNo = value; }
        }

        string _EffectiveDate;

        /// <summary>
        /// Gets or sets the value of variable EffectiveDate.
        /// </summary>
        [TestVariable("28bb748d-c425-4c3b-9d3c-d507e79ac956")]
        public string EffectiveDate
        {
            get { return _EffectiveDate; }
            set { _EffectiveDate = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Txt_Select_Class_code' at Center.", repo.ApplicationUnderTest.Txt_Select_Class_codeInfo, new RecordItemIndex(0));
            //repo.ApplicationUnderTest.Txt_Select_Class_code.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SpanTagSelect' at Center.", repo.ApplicationUnderTest.SpanTagSelectInfo, new RecordItemIndex(1));
            //repo.ApplicationUnderTest.SpanTagSelect.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$StateName' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(2));
            //repo.ApplicationUnderTest.Search.PressKeys(StateName);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.SpanTagSelect'.", repo.ApplicationUnderTest.SpanTagSelectInfo, new RecordItemIndex(3));
            //repo.ApplicationUnderTest.SpanTagSelect.EnsureVisible();
            //Keyboard.Press("{Return}");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtClassCodes1' at Center.", repo.ApplicationUnderTest.TxtClassCodes1Info, new RecordItemIndex(4));
            //repo.ApplicationUnderTest.TxtClassCodes1.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ClassDesc' with focus on 'ApplicationUnderTest.TxtClassCodes1'.", repo.ApplicationUnderTest.TxtClassCodes1Info, new RecordItemIndex(5));
            //repo.ApplicationUnderTest.TxtClassCodes1.PressKeys(ClassDesc);
            //Delay.Milliseconds(0);
            
            MergedUserCodeMethod(repo.ApplicationUnderTest.SpanTagSelectInfo, repo.ApplicationUnderTest.SearchInfo, repo.ApplicationUnderTest.TxtClassCodes1Info, repo.ApplicationUnderTest.Txt_Select_Class_codeInfo, repo.ApplicationUnderTest.BtnAddEligibilityInfo, repo.ApplicationUnderTest.SpanTagSelect1Info, repo.ApplicationUnderTest.TxtClassCodesInfo, repo.ApplicationUnderTest.Txt_Select_Class_code1Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(7));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BtnContinue1' at Center.", repo.ApplicationUnderTest.BtnContinue1Info, new RecordItemIndex(8));
            repo.ApplicationUnderTest.BtnContinue1.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(9));
            Delay.Duration(5000, false);
            
            Key_sequence_TxtBussInsuredName(repo.ApplicationUnderTest.TxtBussInsuredNameInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DrpLegalEntity' at Center.", repo.ApplicationUnderTest.DrpLegalEntityInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.DrpLegalEntity.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LegalEntityName' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.Search.EnsureVisible();
            Keyboard.Press(LegalEntityName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.Search.EnsureVisible();
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DBAName' with focus on 'ApplicationUnderTest.TxtDBAName'.", repo.ApplicationUnderTest.TxtDBANameInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.TxtDBAName.PressKeys(DBAName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Address1' with focus on 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress1'.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress1Info, new RecordItemIndex(15));
            repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress1.PressKeys(Address1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Address2' with focus on 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress2'.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress2Info, new RecordItemIndex(16));
            repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtAddress2.PressKeys(Address2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$CityName' with focus on 'ApplicationUnderTest.TxtCity'.", repo.ApplicationUnderTest.TxtCityInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.TxtCity.PressKeys(CityName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ZipcodeID' with focus on 'ApplicationUnderTest.TxtZipCode'.", repo.ApplicationUnderTest.TxtZipCodeInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.TxtZipCode.PressKeys(ZipcodeID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.MainContentHolder.UseAsIs' at Center.", repo.ApplicationUnderTest.MainContentHolder.UseAsIsInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.MainContentHolder.UseAsIs.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BusinessStartDate' with focus on 'ApplicationUnderTest.TxtDateBussinessStart'.", repo.ApplicationUnderTest.TxtDateBussinessStartInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.TxtDateBussinessStart.PressKeys(BusinessStartDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.Empliabilitylimit' at 339;13.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.EmpliabilitylimitInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.Empliabilitylimit.Click("339;13");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Search' at Center.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.Search.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$EmpLiabilityLimitID' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(23));
            repo.ApplicationUnderTest.Search.PressKeys(EmpLiabilityLimitID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(24));
            repo.ApplicationUnderTest.Search.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtEffectiveDate' at Center.", repo.ApplicationUnderTest.TxtEffectiveDateInfo, new RecordItemIndex(25));
            //repo.ApplicationUnderTest.TxtEffectiveDate.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$EffectiveDate' on item 'ApplicationUnderTest.TxtEffectiveDate'.", repo.ApplicationUnderTest.TxtEffectiveDateInfo, new RecordItemIndex(26));
            //repo.ApplicationUnderTest.TxtEffectiveDate.Element.SetAttributeValue("Value", EffectiveDate);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes1'.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes1Info, new RecordItemIndex(27));
            repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes1.PerformClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtExpMod' at Center.", repo.ApplicationUnderTest.TxtExpModInfo, new RecordItemIndex(28));
            repo.ApplicationUnderTest.TxtExpMod.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ExpModID' with focus on 'ApplicationUnderTest.TxtExpMod'.", repo.ApplicationUnderTest.TxtExpModInfo, new RecordItemIndex(29));
            repo.ApplicationUnderTest.TxtExpMod.PressKeys(ExpModID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtFirstName1' at 49;28.", repo.ApplicationUnderTest.TxtFirstName1Info, new RecordItemIndex(30));
            repo.ApplicationUnderTest.TxtFirstName1.Click("49;28");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$OwnerFirstName' with focus on 'ApplicationUnderTest.TxtFirstName1'.", repo.ApplicationUnderTest.TxtFirstName1Info, new RecordItemIndex(31));
            repo.ApplicationUnderTest.TxtFirstName1.PressKeys(OwnerFirstName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtLastName1' at Center.", repo.ApplicationUnderTest.TxtLastName1Info, new RecordItemIndex(32));
            repo.ApplicationUnderTest.TxtLastName1.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$OwnerLastName' with focus on 'ApplicationUnderTest.TxtLastName1'.", repo.ApplicationUnderTest.TxtLastName1Info, new RecordItemIndex(33));
            repo.ApplicationUnderTest.TxtLastName1.EnsureVisible();
            Keyboard.Press(OwnerLastName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtPerOwner1' at 32;11.", repo.ApplicationUnderTest.TxtPerOwner1Info, new RecordItemIndex(34));
            repo.ApplicationUnderTest.TxtPerOwner1.Click("32;11");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$OwnerPercent' with focus on 'ApplicationUnderTest.TxtPerOwner1'.", repo.ApplicationUnderTest.TxtPerOwner1Info, new RecordItemIndex(35));
            repo.ApplicationUnderTest.TxtPerOwner1.PressKeys(OwnerPercent);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtFirstName1' at 49;28.", repo.ApplicationUnderTest.TxtFirstName1Info, new RecordItemIndex(36));
            repo.ApplicationUnderTest.TxtFirstName1.Click("49;28");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$OwnerFirstName' with focus on 'ApplicationUnderTest.TxtFirstName1'.", repo.ApplicationUnderTest.TxtFirstName1Info, new RecordItemIndex(37));
            repo.ApplicationUnderTest.TxtFirstName1.PressKeys(OwnerFirstName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtLastName1' at Center.", repo.ApplicationUnderTest.TxtLastName1Info, new RecordItemIndex(38));
            repo.ApplicationUnderTest.TxtLastName1.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$OwnerLastName' with focus on 'ApplicationUnderTest.TxtLastName1'.", repo.ApplicationUnderTest.TxtLastName1Info, new RecordItemIndex(39));
            repo.ApplicationUnderTest.TxtLastName1.EnsureVisible();
            Keyboard.Press(OwnerLastName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtPerOwner1' at 32;11.", repo.ApplicationUnderTest.TxtPerOwner1Info, new RecordItemIndex(40));
            repo.ApplicationUnderTest.TxtPerOwner1.Click("32;11");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$OwnerPercent' with focus on 'ApplicationUnderTest.TxtPerOwner1'.", repo.ApplicationUnderTest.TxtPerOwner1Info, new RecordItemIndex(41));
            repo.ApplicationUnderTest.TxtPerOwner1.PressKeys(OwnerPercent);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LabletxtRadioExclude' at Center.", repo.ApplicationUnderTest.LabletxtRadioExcludeInfo, new RecordItemIndex(42));
            repo.ApplicationUnderTest.LabletxtRadioExclude.Click();
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.OwnerStateSelection' at Center.", repo.ApplicationUnderTest.OwnerStateSelectionInfo, new RecordItemIndex(43));
            //repo.ApplicationUnderTest.OwnerStateSelection.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$OwnerState' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(44));
            //repo.ApplicationUnderTest.Search.PressKeys(OwnerState);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Search'.", repo.ApplicationUnderTest.SearchInfo, new RecordItemIndex(45));
            //repo.ApplicationUnderTest.Search.PressKeys("{Return}");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtDescriptionOfOprations' at Center.", repo.ApplicationUnderTest.TxtDescriptionOfOprationsInfo, new RecordItemIndex(46));
            repo.ApplicationUnderTest.TxtDescriptionOfOprations.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DescofOp' with focus on 'ApplicationUnderTest.TxtDescriptionOfOprations'.", repo.ApplicationUnderTest.TxtDescriptionOfOprationsInfo, new RecordItemIndex(47));
            repo.ApplicationUnderTest.TxtDescriptionOfOprations.EnsureVisible();
            Keyboard.Press(DescofOp);
            Delay.Milliseconds(0);
            
            MergedUserCodeMethod1(repo.ApplicationUnderTest.TxtFTEmployee1Info, repo.ApplicationUnderTest.TxtPTEmployee1Info, repo.ApplicationUnderTest.TxtGrossannualPayroll1Info, repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.Click_TableInfo, repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtFTEmployee2Info, repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtPTEmployee2Info, repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtGrossannualPayroll2Info);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'ApplicationUnderTest.TxtFTEmployee1' at Center.", repo.ApplicationUnderTest.TxtFTEmployee1Info, new RecordItemIndex(49));
            //repo.ApplicationUnderTest.TxtFTEmployee1.DoubleClick();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$TxtFTEmp' on item 'ApplicationUnderTest.TxtFTEmployee1'.", repo.ApplicationUnderTest.TxtFTEmployee1Info, new RecordItemIndex(50));
            //repo.ApplicationUnderTest.TxtFTEmployee1.Element.SetAttributeValue("Value", TxtFTEmp);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'ApplicationUnderTest.TxtPTEmployee1' at Center.", repo.ApplicationUnderTest.TxtPTEmployee1Info, new RecordItemIndex(51));
            //repo.ApplicationUnderTest.TxtPTEmployee1.DoubleClick();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$TxtPTEmp' on item 'ApplicationUnderTest.TxtPTEmployee1'.", repo.ApplicationUnderTest.TxtPTEmployee1Info, new RecordItemIndex(52));
            //repo.ApplicationUnderTest.TxtPTEmployee1.Element.SetAttributeValue("Value", TxtPTEmp);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'ApplicationUnderTest.TxtGrossannualPayroll1' at Center.", repo.ApplicationUnderTest.TxtGrossannualPayroll1Info, new RecordItemIndex(53));
            //repo.ApplicationUnderTest.TxtGrossannualPayroll1.DoubleClick();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(54));
            //Delay.Duration(5000, false);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to '$TxtGrossPayroll' on item 'ApplicationUnderTest.TxtGrossannualPayroll1'.", repo.ApplicationUnderTest.TxtGrossannualPayroll1Info, new RecordItemIndex(55));
            //repo.ApplicationUnderTest.TxtGrossannualPayroll1.Element.SetAttributeValue("Value", TxtGrossPayroll);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(56));
            //Delay.Duration(5000, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.Click_Table' at Center.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.Click_TableInfo, new RecordItemIndex(57));
            //repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.Click_Table.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BtnNext' at Center.", repo.ApplicationUnderTest.BtnNextInfo, new RecordItemIndex(58));
            //repo.ApplicationUnderTest.BtnNext.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 30s.", new RecordItemIndex(59));
            //Delay.Duration(30000, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.WCNavigation1' at 10;10.", repo.ApplicationUnderTest.WCNavigation1Info, new RecordItemIndex(60));
            //repo.ApplicationUnderTest.WCNavigation1.Click("10;10");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 30s.", new RecordItemIndex(61));
            //Delay.Duration(30000, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtInsuredSubcontract' at Center.", repo.ApplicationUnderTest.TxtInsuredSubcontractInfo, new RecordItemIndex(62));
            //repo.ApplicationUnderTest.TxtInsuredSubcontract.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Back}' with focus on 'ApplicationUnderTest.TxtInsuredSubcontract'.", repo.ApplicationUnderTest.TxtInsuredSubcontractInfo, new RecordItemIndex(63));
            //repo.ApplicationUnderTest.TxtInsuredSubcontract.PressKeys("{Back}");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$InsSubcontractorAmt' with focus on 'ApplicationUnderTest.TxtInsuredSubcontract'.", repo.ApplicationUnderTest.TxtInsuredSubcontractInfo, new RecordItemIndex(64));
            //repo.ApplicationUnderTest.TxtInsuredSubcontract.PressKeys(InsSubcontractorAmt);
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxttypeofworkSubcontract' at Center.", repo.ApplicationUnderTest.TxttypeofworkSubcontractInfo, new RecordItemIndex(65));
            //repo.ApplicationUnderTest.TxttypeofworkSubcontract.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'YES' with focus on 'ApplicationUnderTest.TxttypeofworkSubcontract'.", repo.ApplicationUnderTest.TxttypeofworkSubcontractInfo, new RecordItemIndex(66));
            //repo.ApplicationUnderTest.TxttypeofworkSubcontract.PressKeys("YES");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes' at Center.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYesInfo, new RecordItemIndex(67));
            //repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes2' at Center.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes2Info, new RecordItemIndex(68));
            //repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.LabelTagYes2.Click();
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.BtnNext'.", repo.ApplicationUnderTest.BtnNextInfo, new RecordItemIndex(69));
            repo.ApplicationUnderTest.BtnNext.PerformClick();
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.MainContentHolder.UseAsIs'.", repo.ApplicationUnderTest.MainContentHolder.UseAsIsInfo, new RecordItemIndex(70));
            //repo.ApplicationUnderTest.MainContentHolder.UseAsIs.PerformClick();
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 15s.", new RecordItemIndex(71));
            Delay.Duration(15000, false);
            
            // HI
            Report.Log(ReportLevel.Info, "Section", "HI", new RecordItemIndex(72));
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.TxtAddinsuredName1' at 252;25.", repo.ApplicationUnderTest.TxtAddinsuredName1Info, new RecordItemIndex(73));
            //repo.ApplicationUnderTest.TxtAddinsuredName1.Click("252;25");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AdditionalInsuredName' with focus on 'ApplicationUnderTest.TxtAddinsuredName1'.", repo.ApplicationUnderTest.TxtAddinsuredName1Info, new RecordItemIndex(74));
            //repo.ApplicationUnderTest.TxtAddinsuredName1.PressKeys(AdditionalInsuredName);
            //Delay.Milliseconds(20);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtFEINNo1' at 136;15.", repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtFEINNo1Info, new RecordItemIndex(75));
            //repo.ApplicationUnderTest.BgGreyBorderBorderBottomBorderWhi.TxtFEINNo1.Click("136;15");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AddInsFEINNo' with focus on 'ApplicationUnderTest.Seach_Link'.", repo.ApplicationUnderTest.Seach_LinkInfo, new RecordItemIndex(76));
            //repo.ApplicationUnderTest.Seach_Link.EnsureVisible();
            //Keyboard.Press(AddInsFEINNo);
            //Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
